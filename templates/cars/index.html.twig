<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Unbound</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        #logoContainer {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: row;
            gap: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            border: 2px solid black;
            
            padding: 10px;
        }
        .logo {
            width: 50px;
            height: 50px;
            cursor: pointer;
        }
        .model-container {
            display: none;
            position: absolute;
            bottom: 70px;
            background-color: rgba(255, 255, 255, 0.9);
            border: 2px solid black;
            border-radius: 10px;
            padding: 10px;
            flex-direction: column;
            gap: 5px;
            z-index: 10;
        }
        .model-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
        }
        .model-button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div id="logoContainer"></div>
    <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.150.1/build/three.module.js",
        "GLTFLoader": "https://unpkg.com/three@0.150.1/examples/jsm/loaders/GLTFLoader.js",
        "FBXLoader": "https://unpkg.com/three@0.150.1/examples/jsm/loaders/FBXLoader.js",
        "OrbitControls": "https://unpkg.com/three@0.150.1/examples/jsm/controls/OrbitControls.js"
      }
    }
    </script>
    <script type="module">
      import * as THREE from 'three';
      import { GLTFLoader } from 'GLTFLoader';
      import { FBXLoader } from 'FBXLoader';
      import { OrbitControls } from 'OrbitControls';

      let selectedCar = null;
      let rotating = true;
      let rotationSpeed = 0.01;

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.target.set(0, 1, 0);
      controls.update();

      const ambientLight = new THREE.AmbientLight(0xffffff, 2); // Aumenta la intensidad de la luz ambiental
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 2); // Ajusta la intensidad de la luz direccional
      directionalLight.position.set(0, 5, 5).normalize(); // Cambia la posición de la luz
      scene.add(directionalLight);

      const pointLight = new THREE.PointLight(0xffffff, 1.5); // Agrega una luz puntual
      pointLight.position.set(0, 3, 4);
      scene.add(pointLight);

      camera.position.set(0, 1, 7); // Mueve la cámara más a la derecha

      let garage;
      const loader = new GLTFLoader();
      loader.load('/models/parking_garage.glb', (gltf) => {
        garage = gltf.scene;
        scene.add(garage);
      });

      function animate() {
        requestAnimationFrame(animate);

        if (rotating) {
          camera.position.x = camera.position.x * Math.cos(rotationSpeed) + camera.position.z * Math.sin(rotationSpeed);
          camera.position.z = camera.position.z * Math.cos(rotationSpeed) - camera.position.x * Math.sin(rotationSpeed);
          camera.lookAt(scene.position);
        }

        controls.update();
        renderer.render(scene, camera);
      }

      animate();

      const logoContainer = document.getElementById('logoContainer');

      const carData = [
        { brand: 'Ford', logo: '/logos/dodge.svg', models: [
            { name: 'daytona 1969', path: '/models/doms_dodge_charger_daytona_1969_fastfurious_6.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 } }
        ] },
        { brand: 'Nissan', logo: '/logos/Nissan_logo.svg', models: [
            { name: 'Model 2', path: '/models/pualR34.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 3', path: '/models/r34.glb', type: 'gltf', position: { x: 10, y: 0, z: 10 } },
            { name: 'Model 4', path: '/models/r334.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 5', path: '/models/ford_mustang_boss_302.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 6', path: '/models/ford_mustang_gt.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 7', path: '/models/r35.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
        ]},
        { brand: 'BMW', logo: '/logos/bm.png', models: [
            { name: 'e34', path: '/models/bmw_e34_stance_style.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'm4', path: '/models/bmw_m4_realistic_free.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 3', path: '/models/r334.glb', type: 'gltf', position: { x: 10, y: 0, z: 10 } },
            { name: 'm3', path: '/models/2001_bmw_m3-gtr.glb', type: 'gltf', position: { x: 0, y: 0, z: -8 } },
        ]},
        { brand: 'BMW5', logo: '/logos/bm.png', models: [
            { name: 'Model 1', path: '/models/doms_dodge_charger_daytona_1969_fastfurious_6.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Model 2', path: '/models/jiotto_caspita_roadster_1989.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
        ]},
        { brand: 'Toyota', logo: '/logos/toyo.png', models: [
            { name: 'Supra mk4', path: '/models/mk4.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
            { name: 'Supra mk5', path: '/models/toyota_gr_supra.glb', type: 'gltf', position: { x: 0, y: 0, z: 0 } },
        ]},
         { brand: 'Porsche', logo: '/logos/por.png', models: [
            { name: '911 Carrera s4', path: '/models/free_porsche_911_carrera_4s.glb', type: 'gltf', position: { x: 0.8, y: 0.8, z: 0 } },
            { name: '911 930 turbo', path: '/models/porsche_911_930_turbo_1975.glb', type: 'gltf', position: { x: 2, y: 2.7, z: -1 } },
        ]},
      ];

      carData.forEach(car => {
        const brandDiv = document.createElement('div');
        const brandLogo = document.createElement('img');
        brandLogo.src = car.logo;
        brandLogo.className = 'logo';
        brandLogo.alt = car.brand;
        brandLogo.addEventListener('click', (event) => toggleModelContainer(event, car.brand));
        brandDiv.appendChild(brandLogo);

        const modelContainer = document.createElement('div');
        modelContainer.className = 'model-container';
        modelContainer.id = `model-container-${car.brand}`;
        car.models.forEach(model => {
          const modelButton = document.createElement('button');
          modelButton.textContent = model.name;
          modelButton.className = 'model-button';
          modelButton.addEventListener('click', () => loadCarModel(model));
          modelContainer.appendChild(modelButton);
        });

        brandDiv.appendChild(modelContainer);
        logoContainer.appendChild(brandDiv);
      });

      function toggleModelContainer(event, brand) {
        const modelContainer = document.getElementById(`model-container-${brand}`);
        const rect = event.target.getBoundingClientRect();
        modelContainer.style.left = `${rect.left}px`;
        modelContainer.style.display = modelContainer.style.display === 'none' || modelContainer.style.display === '' ? 'flex' : 'none';
      }

      function clearCarModels() {
        // Deja la cochera y las luces en la escena
        const keepObjects = [garage, ambientLight, directionalLight, pointLight];
        scene.children.forEach(child => {
          if (!keepObjects.includes(child)) {
            scene.remove(child);
          }
        });
      }

      function loadCarModel(model) {
        clearCarModels();
        rotating = false;

        const loader = new GLTFLoader();
        loader.load(
          model.path,
          (gltf) => {
            const carModel = gltf.scene;
            carModel.traverse((child) => {
              if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
              }
            });

            carModel.position.set(model.position.x, model.position.y, model.position.z); // Usar la posición del modelo

            const box = new THREE.Box3().setFromObject(carModel);
            const size = box.getSize(new THREE.Vector3());
            const maxAxis = Math.max(size.x, size.y, size.z);
            carModel.scale.setScalar(6 / maxAxis); // Incrementa la escala de los modelos

            scene.add(carModel);
            camera.position.set(-7,1, 8); // Asegura que la cámara esté en la nueva posición
            controls.target.set(-0.5, 1, 4);
            controls.update();

            selectedCar = carModel;
          },
          undefined,
          (error) => {
            console.error('Error al cargar el modelo:', error);
          }
        );
      }
    </script>
</body>
</html>

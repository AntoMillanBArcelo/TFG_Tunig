<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Unbound</title>
    <link rel="stylesheet" href="{{ asset('css/garajeStyle.css') }}">
</head>
<body>
    <div id="logoContainer"></div>
    <div id="modal">
        <span id="closeModal">&times;</span>
        <h2 id="modalTitle"></h2>
        <p id="modalContent"></p>
    </div>
    <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.150.1/build/three.module.js",
        "GLTFLoader": "https://unpkg.com/three@0.150.1/examples/jsm/loaders/GLTFLoader.js",
        "FBXLoader": "https://unpkg.com/three@0.150.1/examples/jsm/loaders/FBXLoader.js",
        "OrbitControls": "https://unpkg.com/three@0.150.1/examples/jsm/controls/OrbitControls.js"
      }
    }
    </script>
    <script type="module">
      import * as THREE from 'three';
      import { GLTFLoader } from 'GLTFLoader';
      import { FBXLoader } from 'FBXLoader';
      import { OrbitControls } from 'OrbitControls';

      let selectedCar = null;
      let rotating = true;
      let rotationSpeed = 0.01;

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.target.set(0, 1, 0);
      controls.update();

      const ambientLight = new THREE.AmbientLight(0xffffff, 2); // Aumenta la intensidad de la luz ambiental
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 2); // Ajusta la intensidad de la luz direccional
      directionalLight.position.set(0, 5, 5).normalize(); // Cambia la posición de la luz
      scene.add(directionalLight);

      const pointLight = new THREE.PointLight(0xffffff, 1.5); // Agrega una luz puntual
      pointLight.position.set(0, 3, 4);
      scene.add(pointLight);

      const spotLight = new THREE.SpotLight(0xffffff, 1.5); // Agrega una luz focal
      spotLight.position.set(5, 5, 0);
      spotLight.angle = Math.PI / 6;
      spotLight.penumbra = 0.;
      spotLight.decay = 2;
      spotLight.distance = 50;
      scene.add(spotLight);

      camera.position.set(0, 1, 6.8); // Mueve la cámara más a la derecha

      let garage;
      const loader = new GLTFLoader();
      loader.load('/models/parking_garage.glb', (gltf) => {
        garage = gltf.scene;
        scene.add(garage);
      });

      function animate() {
        requestAnimationFrame(animate);

        if (rotating) {
          camera.position.x = camera.position.x * Math.cos(rotationSpeed) + camera.position.z * Math.sin(rotationSpeed);
          camera.position.z = camera.position.z * Math.cos(rotationSpeed) - camera.position.x * Math.sin(rotationSpeed);
          camera.lookAt(scene.position);
        }

        controls.update();
        renderer.render(scene, camera);
      }

      animate();

      const logoContainer = document.getElementById('logoContainer');

      const carData = [
        { brand: 'Ford', logo: '/logos/dodge.svg', models: [
            { name: 'daytona 1969', path: '/models/doms_dodge_charger_daytona_1969_fastfurious_6.glb', type: 'gltf', position: { x: 0, y: -0.5, z: 3 }, description: 'Descripción del modelo daytona 1969.' },
            { name: 'challenger 1970', path: '/models/dodge_challenger_1970.glb', type: 'gltf', position: { x: 0, y: -0.5, z: 3 }, description: 'Descripción del modelo challenger 1970.' },
        ] },
        { brand: 'Nissan', logo: '/logos/Nissan_logo.svg', models: [
            { name: 'Skyline GTR r33', path: '/models/nissan_skyline_gtr_r33.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo Nissan Model 2.' },
            { name: 'Skyline GTR r34', path: '/models/2002_nissan_skyline_gt-r_r34_v-spec_ii.glb', type: 'gltf', position: { x:123 , y: -6.3, z: 33 }, description: 'Descripción del modelo Nissan Model 3.' },
            { name: 'Skyline GTR r35', path: '/models/r35.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo Nissan Model 7.' },
        ]},
        { brand: 'BMW', logo: '/logos/bm.png', models: [
            { name: 'e34', path: '/models/bmw_e34_stance_style.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo BMW e34.' },
            { name: 'm4', path: '/models/bmw_m4_realistic_free.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo BMW m4.' },
            { name: 'm3', path: '/models/2001_bmw_m3-gtr.glb', type: 'gltf', position: { x: -1.5, y: -0.6, z: -3.5 }, description: 'Descripción del modelo BMW m3.' },
        ]},
        { brand: 'Caspita', logo: '/logos/Captura.png', models: [
            { name: 'Jiotto Caspita', path: '/models/jiotto_caspita_roadster_1989.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo BMW5 Model 2.' },
        ]},
        { brand: 'Toyota', logo: '/logos/toyo.png', models: [
            { name: 'Supra mk4', path: '/models/mk4.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo Toyota Supra mk4.' },
            { name: 'Supra mk5', path: '/models/toyota_gr_supra.glb', type: 'gltf', position: { x: 0, y: -0.6, z: 3 }, description: 'Descripción del modelo Toyota Supra mk5.' },
        ]},
         { brand: 'Porsche', logo: '/logos/por.png', models: [
            { name: '911 Carrera s4', path: '/models/free_porsche_911_carrera_4s.glb', type: 'gltf', position: { x: 0, y: 0.15, z: 3 }, description: 'Descripción del modelo Porsche 911 Carrera s4.' },
            { name: '911 930 turbo', path: '/models/porsche_911_930_turbo_1975.glb', type: 'gltf', position: { x: 2, y:2.2, z: 2 }, description: 'Descripción del modelo Porsche 911 930 turbo.' },
        ]},
      ];

      let lastOpenedContainer = null;

      carData.forEach(car => {
        const brandDiv = document.createElement('div');
        const brandLogo = document.createElement('img');
        brandLogo.src = car.logo;
        brandLogo.className = 'logo';
        brandLogo.alt = car.brand;
        brandLogo.addEventListener('click', (event) => toggleModelContainer(event, car.brand));
        brandDiv.appendChild(brandLogo);

        const modelContainer = document.createElement('div');
        modelContainer.className = 'model-container';
        modelContainer.id = `model-container-${car.brand}`;
        car.models.forEach(model => {
          const modelButton = document.createElement('button');
          modelButton.textContent = model.name;
          modelButton.className = 'model-button';
          modelButton.addEventListener('click', () => loadCarModel(model));
          modelContainer.appendChild(modelButton);
        });

        brandDiv.appendChild(modelContainer);
        logoContainer.appendChild(brandDiv);
      });

      function toggleModelContainer(event, brand) {
        const modelContainer = document.getElementById(`model-container-${brand}`);

        if (lastOpenedContainer && lastOpenedContainer !== modelContainer) {
          lastOpenedContainer.style.display = 'none';
        }

        if (modelContainer.style.display === 'none' || modelContainer.style.display === '') {
          modelContainer.style.display = 'flex';
          modelContainer.style.flexDirection = 'row';
        } else {
          modelContainer.style.display = 'none';
        }

        lastOpenedContainer = modelContainer;
      }

      function clearCarModels() {
        const keepObjects = [garage, ambientLight, directionalLight, pointLight, spotLight];
        scene.children.forEach(child => {
          if (!keepObjects.includes(child)) {
            scene.remove(child);
          }
        });
      }

      function loadCarModel(model) {
        clearCarModels();
        rotating = false;

        const loader = new GLTFLoader();
        loader.load(
          model.path,
          (gltf) => {
            const carModel = gltf.scene;
            carModel.traverse((child) => {
              if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
              }
            });

            carModel.position.set(model.position.x, model.position.y, model.position.z); // Usar la posición del modelo

            const box = new THREE.Box3().setFromObject(carModel);
            const size = box.getSize(new THREE.Vector3());
            const maxAxis = Math.max(size.x, size.y, size.z);
            carModel.scale.setScalar(6 / maxAxis); // Incrementa la escala de los modelos

            scene.add(carModel);

            spotLight.target = carModel; // Apunta la luz focal al modelo cargado
            spotLight.position.set(model.position.x, model.position.y + 10, model.position.z);

            camera.position.set(-7, 1, 8); // Asegura que la cámara esté en la nueva posición
            controls.target.set(-0.5, 1, 4);
            controls.update();

            selectedCar = carModel;
            showModal(model); // Muestra la ventana modal con la información del modelo
          },
          undefined,
          (error) => {
            console.error('Error al cargar el modelo:', error);
          }
        );
      }

      function showModal(model) {
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modalTitle');
        const modalContent = document.getElementById('modalContent');
        
        modalTitle.textContent = model.name;
        modalContent.textContent = model.description;
        
        modal.style.display = 'block';
      }

      document.getElementById('closeModal').addEventListener('click', () => {
        document.getElementById('modal').style.display = 'none';
      });
    </script>
</body>
</html>
